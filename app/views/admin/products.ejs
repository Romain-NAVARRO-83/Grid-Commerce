<%- include('./partials/head') %>
    <%- include('./partials/nav') %>
        <main>
            <h1>Products</h1>
            <section>
                <h3>Best sellers</h3>
                <div id="bestSellers" style="width:100%;height:300px"></div>
            </section>
            <table>
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Picture</th>
                        <th>Ref</th>
                        <th>Name</th>
                        <th>Description short</th>
                        <th>Description long</th>
                        <th>Price</th>
                        <th>Stock</th>
                    </tr>
                </thead>
                <tbody>
                    <% locals.products.forEach(product=> { const longDesc = product.description_long%>
                        <tr>
                            <td>
                               <a href="/admin/products/<%= product.id %>"> <%= product.id %></a>
                            </td>
                            <td><img src="<%= product.picture_url %>" alt="<%= product.name %>" width="50"></td>
                            <td>
                                <%= product.reference %>
                            </td>
                            <td>
                                <%= product.name %>
                            </td>
                            <td>
                                <%= product.description_short %>
                            </td>
                            <td><button class="modalToggler"><i class="fa fa-pencil"></i></button></td>
                            <td>
                                <%= product.price %>
                            </td>
                            <td>
                                <%= product.stock %>
                            </td>
                        </tr>
                        <% }) %>
                </tbody>
            </table>
            
content
<form action="update_product"id="editModal" class="modal">
    <button class="modalToggler"><i class="fa fa-pencil"></i></button>
    <input type="text" name="" id="">
    <input type="text" name="" id="">
</form>
            
        </main>
        <script src="https://cdn.amcharts.com/lib/5/index.js"></script>
        <script src="https://cdn.amcharts.com/lib/5/xy.js"></script>
        <script src="https://cdn.amcharts.com/lib/5/themes/Animated.js"></script>


        <script>
            am5.ready(function () {

                // Create root element
                // https://www.amcharts.com/docs/v5/getting-started/#Root_element
                let root = am5.Root.new("bestSellers");

                // Set themes
                // https://www.amcharts.com/docs/v5/concepts/themes/
                root.setThemes([
                    am5themes_Animated.new(root)
                ]);

                let data = [
  
<% locals.bestSellers.forEach(product => {
                    console.log(product) %>
                {
                    name: "<%= product.name %> ",
                    steps: <%= product.totalsold %> ,
                    pictureSettings: {
                        src: "/img/<%= product.name.toLowerCase().replace(' ','-').replace('Ã©','e') %>-200W.jpg"
                    }
                },
  <%});%>

];

                // Create chart
                // https://www.amcharts.com/docs/v5/charts/xy-chart/
                let chart = root.container.children.push(
                    am5xy.XYChart.new(root, {
                        panX: false,
                        panY: false,
                        wheelX: "none",
                        wheelY: "none",
                        paddingBottom: 50,
                        paddingTop: 40,
                        paddingLeft: 0,
                        paddingRight: 0
                    })
                );

                // Create axes
                // https://www.amcharts.com/docs/v5/charts/xy-chart/axes/

                let xRenderer = am5xy.AxisRendererX.new(root, {
                    minorGridEnabled: true,
                    minGridDistance: 60
                });
                xRenderer.grid.template.set("visible", false);

                let xAxis = chart.xAxes.push(
                    am5xy.CategoryAxis.new(root, {
                        paddingTop: 40,
                        categoryField: "name",
                        renderer: xRenderer
                    })
                );


                let yRenderer = am5xy.AxisRendererY.new(root, {});
                yRenderer.grid.template.set("strokeDasharray", [3]);

                let yAxis = chart.yAxes.push(
                    am5xy.ValueAxis.new(root, {
                        min: 0,
                        renderer: yRenderer
                    })
                );

                // Add series
                // https://www.amcharts.com/docs/v5/charts/xy-chart/series/
                let series = chart.series.push(
                    am5xy.ColumnSeries.new(root, {
                        name: "Income",
                        xAxis: xAxis,
                        yAxis: yAxis,
                        valueYField: "steps",
                        categoryXField: "name",
                        sequencedInterpolation: true,
                        calculateAggregates: true,
                        maskBullets: false,
                        tooltip: am5.Tooltip.new(root, {
                            dy: -30,
                            pointerOrientation: "vertical",
                            labelText: "{valueY}"
                        })
                    })
                );

                series.columns.template.setAll({
                    strokeOpacity: 0,
                    cornerRadiusBR: 10,
                    cornerRadiusTR: 10,
                    cornerRadiusBL: 10,
                    cornerRadiusTL: 10,
                    maxWidth: 25,
                    fillOpacity: 0.8
                });

                let currentlyHovered;

                series.columns.template.events.on("pointerover", function (e) {
                    handleHover(e.target.dataItem);
                });

                series.columns.template.events.on("pointerout", function (e) {
                    handleOut();
                });

                function handleHover(dataItem) {
                    if (dataItem && currentlyHovered != dataItem) {
                        handleOut();
                        currentlyHovered = dataItem;
                        let bullet = dataItem.bullets[0];
                        bullet.animate({
                            key: "locationY",
                            to: 1,
                            duration: 600,
                            easing: am5.ease.out(am5.ease.cubic)
                        });
                    }
                }

                function handleOut() {
                    if (currentlyHovered) {
                        let bullet = currentlyHovered.bullets[0];
                        bullet.animate({
                            key: "locationY",
                            to: 0,
                            duration: 600,
                            easing: am5.ease.out(am5.ease.cubic)
                        });
                    }
                }

                let circleTemplate = am5.Template.new({});

                series.bullets.push(function (root, series, dataItem) {
                    let bulletContainer = am5.Container.new(root, {});
                    let circle = bulletContainer.children.push(
                        am5.Circle.new(
                            root,
                            {
                                radius: 25
                            },
                            circleTemplate
                        )
                    );

                    let maskCircle = bulletContainer.children.push(
                        am5.Circle.new(root, { radius: 27 ,stroke : 4})
                    );

                    // only containers can be masked, so we add image to another container
                    let imageContainer = bulletContainer.children.push(
                        am5.Container.new(root, {
                            mask: maskCircle
                        })
                    );

                    let image = imageContainer.children.push(
                        am5.Picture.new(root, {
                            templateField: "pictureSettings",
                            centerX: am5.p50,
                            centerY: am5.p50,
                            width: 60,
                            height: 60
                            // stroke : "0xFF6600"
                            // stroke: "#ff6600"
                            
                        })
                    );

                    return am5.Bullet.new(root, {
                        locationY: 0,
                        sprite: bulletContainer
                    });
                });

                // heatrule
                series.set("heatRules", [
                    {
                        dataField: "valueY",
                        min: am5.color(0x805940),
                        max: am5.color(0xff6600),
                        target: series.columns.template,
                        key: "fill"
                    },
                    {
                        dataField: "valueY",
                        min: am5.color(0x805940),
                        max: am5.color(0xff6600),
                        target: circleTemplate,
                        key: "fill"
                    }
                ]);

                series.data.setAll(data);
                xAxis.data.setAll(data);

                let cursor = chart.set("cursor", am5xy.XYCursor.new(root, {}));
                cursor.lineX.set("visible", false);
                cursor.lineY.set("visible", false);

                cursor.events.on("cursormoved", function () {
                    let dataItem = series.get("tooltip").dataItem;
                    if (dataItem) {
                        handleHover(dataItem);
                    } else {
                        handleOut();
                    }
                });

                // Make stuff animate on load
                // https://www.amcharts.com/docs/v5/concepts/animations/
                series.appear();
                chart.appear(1000, 100);

            }); // end am5.ready()
        </script>
        <%- include('./partials/foot') %>